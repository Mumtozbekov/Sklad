 //------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(Sklad.Entity.dbContext),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets4fc1522d7eefe0268eb5bd2d08da99cd4abbd3b94a79ce59a2d41372d71323da))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework 6 Power Tools", "0.9.2.0")]
    internal sealed class ViewsForBaseEntitySets4fc1522d7eefe0268eb5bd2d08da99cd4abbd3b94a79ce59a2d41372d71323da : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "4fc1522d7eefe0268eb5bd2d08da99cd4abbd3b94a79ce59a2d41372d71323da"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.DokumentProdaj")
            {
                return GetView0();
            }

            if (extentName == "CodeFirstDatabase.Skladi")
            {
                return GetView1();
            }

            if (extentName == "CodeFirstDatabase.Tovar")
            {
                return GetView2();
            }

            if (extentName == "CodeFirstDatabase.Kontragent")
            {
                return GetView3();
            }

            if (extentName == "dbContext.dokumentProdajs")
            {
                return GetView4();
            }

            if (extentName == "dbContext.DokumentProdaj_Sklad_m")
            {
                return GetView5();
            }

            if (extentName == "dbContext.DokumentProdaj_Xaridor_m")
            {
                return GetView6();
            }

            if (extentName == "dbContext.sklads")
            {
                return GetView7();
            }

            if (extentName == "dbContext.tovari")
            {
                return GetView8();
            }

            if (extentName == "dbContext.Tovar_Kontragent_m")
            {
                return GetView9();
            }

            if (extentName == "dbContext.Tovar_Sklad_m")
            {
                return GetView10();
            }

            if (extentName == "dbContext.DokumentProdaj_Tovars")
            {
                return GetView11();
            }

            if (extentName == "dbContext.kontragents")
            {
                return GetView12();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.DokumentProdaj.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DokumentProdaj
        [CodeFirstDatabaseSchema.DokumentProdaj](T4.DokumentProdaj_id, T4.DokumentProdaj_Name, T4.DokumentProdaj_Sana, T4.DokumentProdaj_Naqd, T4.DokumentProdaj_Otkazma, T4.[DokumentProdaj.Tolov_turi], T4.DokumentProdaj_Summa, T4.[DokumentProdaj.Sklad_m_id], T4.[DokumentProdaj.Xaridor_m_id])
    FROM (
        SELECT T1.DokumentProdaj_id, T1.DokumentProdaj_Name, T1.DokumentProdaj_Sana, T1.DokumentProdaj_Naqd, T1.DokumentProdaj_Otkazma, T1.[DokumentProdaj.Tolov_turi], T1.DokumentProdaj_Summa, T3.[DokumentProdaj.Sklad_m_id], T2.[DokumentProdaj.Xaridor_m_id], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1, (T3._from2 AND T3._from2 IS NOT NULL) AS _from2
        FROM  (
            SELECT 
                T.id AS DokumentProdaj_id, 
                T.Name AS DokumentProdaj_Name, 
                T.Sana AS DokumentProdaj_Sana, 
                T.Naqd AS DokumentProdaj_Naqd, 
                T.Otkazma AS DokumentProdaj_Otkazma, 
                T.Tolov_turi AS [DokumentProdaj.Tolov_turi], 
                T.Summa AS DokumentProdaj_Summa, 
                True AS _from0
            FROM dbContext.dokumentProdajs AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.DokumentProdaj_Xaridor_m_Source).id AS DokumentProdaj_id, 
                Key(T.DokumentProdaj_Xaridor_m_Target).id AS [DokumentProdaj.Xaridor_m_id], 
                True AS _from1
            FROM dbContext.DokumentProdaj_Xaridor_m AS T) AS T2
            ON T1.DokumentProdaj_id = T2.DokumentProdaj_id
            LEFT OUTER JOIN (
            SELECT 
                Key(T.DokumentProdaj_Sklad_m_Source).id AS DokumentProdaj_id, 
                Key(T.DokumentProdaj_Sklad_m_Target).id AS [DokumentProdaj.Sklad_m_id], 
                True AS _from2
            FROM dbContext.DokumentProdaj_Sklad_m AS T) AS T3
            ON T1.DokumentProdaj_id = T3.DokumentProdaj_id
    ) AS T4");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Skladi.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Skladi
        [CodeFirstDatabaseSchema.Skladi](T1.Skladi_id, T1.Skladi_Name, T1.Skladi_More, T1.Skladi_Adress)
    FROM (
        SELECT 
            T.id AS Skladi_id, 
            T.Name AS Skladi_Name, 
            T.More AS Skladi_More, 
            T.Adress AS Skladi_Adress, 
            True AS _from0
        FROM dbContext.sklads AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Tovar.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Tovar
        [CodeFirstDatabaseSchema.Tovar](T5.Tovar_id, T5.Tovar_Name, T5.Tovar_Sana, T5.Tovar_Quantity, T5.Tovar_ShtrixKod, T5.Tovar_Turi, T5.Tovar_OlchovBirligi, T5.Tovar_Narxi, T5.Tovar_Summa, T5.[Tovar.Kontragent_m_id], T5.[Tovar.Sklad_m_id], T5.[Tovar.DokumentProdaj_id])
    FROM (
        SELECT T1.Tovar_id, T1.Tovar_Name, T1.Tovar_Sana, T1.Tovar_Quantity, T1.Tovar_ShtrixKod, T1.Tovar_Turi, T1.Tovar_OlchovBirligi, T1.Tovar_Narxi, T1.Tovar_Summa, T2.[Tovar.Kontragent_m_id], T4.[Tovar.Sklad_m_id], T3.[Tovar.DokumentProdaj_id], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1, (T4._from2 AND T4._from2 IS NOT NULL) AS _from2, (T3._from3 AND T3._from3 IS NOT NULL) AS _from3
        FROM  (
            SELECT 
                T.id AS Tovar_id, 
                T.Name AS Tovar_Name, 
                T.Sana AS Tovar_Sana, 
                T.Quantity AS Tovar_Quantity, 
                T.ShtrixKod AS Tovar_ShtrixKod, 
                T.Turi AS Tovar_Turi, 
                T.OlchovBirligi AS Tovar_OlchovBirligi, 
                T.Narxi AS Tovar_Narxi, 
                T.Summa AS Tovar_Summa, 
                True AS _from0
            FROM dbContext.tovari AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Tovar_Kontragent_m_Source).id AS Tovar_id, 
                Key(T.Tovar_Kontragent_m_Target).id AS [Tovar.Kontragent_m_id], 
                True AS _from1
            FROM dbContext.Tovar_Kontragent_m AS T) AS T2
            ON T1.Tovar_id = T2.Tovar_id
            LEFT OUTER JOIN (
            SELECT 
                Key(T.DokumentProdaj_Tovars_Target).id AS Tovar_id, 
                Key(T.DokumentProdaj_Tovars_Source).id AS [Tovar.DokumentProdaj_id], 
                True AS _from3
            FROM dbContext.DokumentProdaj_Tovars AS T) AS T3
            ON T1.Tovar_id = T3.Tovar_id
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Tovar_Sklad_m_Source).id AS Tovar_id, 
                Key(T.Tovar_Sklad_m_Target).id AS [Tovar.Sklad_m_id], 
                True AS _from2
            FROM dbContext.Tovar_Sklad_m AS T) AS T4
            ON T1.Tovar_id = T4.Tovar_id
    ) AS T5");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Kontragent.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Kontragent
        [CodeFirstDatabaseSchema.Kontragent](T2.Kontragent_id, T2.Kontragent_Name, T2.Kontragent_Adress, T2.Kontragent_More, T2.Kontragent_Discriminator)
    FROM (
        SELECT -- Constructing Discriminator
            T1.Kontragent_id, 
            T1.Kontragent_Name, 
            T1.Kontragent_Adress, 
            T1.Kontragent_More, 
            CASE
                WHEN T1._from1 THEN N'Xaridor'
                ELSE N'Kontragent'
            END AS Kontragent_Discriminator
        FROM (
            SELECT 
                T.id AS Kontragent_id, 
                T.Name AS Kontragent_Name, 
                T.Adress AS Kontragent_Adress, 
                T.More AS Kontragent_More, 
                True AS _from0, 
                CASE WHEN T IS OF (ONLY [Sklad.Entity.Xaridor]) THEN True ELSE False END AS _from1, 
                CASE WHEN T IS OF (ONLY [Sklad.Entity.Kontragent]) THEN True ELSE False END AS _from2
            FROM dbContext.kontragents AS T
        ) AS T1
    ) AS T2");
        }

        /// <summary>
        /// Gets the view for dbContext.dokumentProdajs.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing dokumentProdajs
        [Sklad.Entity.DokumentProdaj](T1.DokumentProdaj_id, T1.DokumentProdaj_Name, T1.DokumentProdaj_Sana, T1.DokumentProdaj_Naqd, T1.DokumentProdaj_Otkazma, T1.[DokumentProdaj.Tolov_turi], T1.DokumentProdaj_Summa) WITH 
        RELATIONSHIP(CREATEREF(dbContext.sklads, ROW(T1.[DokumentProdaj_Sklad_m.DokumentProdaj_Sklad_m_Target.id]),[Sklad.Entity.Skladi]),[Sklad.Entity.DokumentProdaj_Sklad_m],DokumentProdaj_Sklad_m_Source,DokumentProdaj_Sklad_m_Target) 
        RELATIONSHIP(CREATEREF(dbContext.kontragents, ROW(T1.[DokumentProdaj_Xaridor_m.DokumentProdaj_Xaridor_m_Target.id]),[Sklad.Entity.Xaridor]),[Sklad.Entity.DokumentProdaj_Xaridor_m],DokumentProdaj_Xaridor_m_Source,DokumentProdaj_Xaridor_m_Target) 
    FROM (
        SELECT 
            T.id AS DokumentProdaj_id, 
            T.Name AS DokumentProdaj_Name, 
            T.Sana AS DokumentProdaj_Sana, 
            T.Naqd AS DokumentProdaj_Naqd, 
            T.Otkazma AS DokumentProdaj_Otkazma, 
            T.Tolov_turi AS [DokumentProdaj.Tolov_turi], 
            T.Summa AS DokumentProdaj_Summa, 
            True AS _from0, 
            T.Sklad_m_id AS [DokumentProdaj_Sklad_m.DokumentProdaj_Sklad_m_Target.id], 
            T.Xaridor_m_id AS [DokumentProdaj_Xaridor_m.DokumentProdaj_Xaridor_m_Target.id]
        FROM CodeFirstDatabase.DokumentProdaj AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for dbContext.DokumentProdaj_Sklad_m.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DokumentProdaj_Sklad_m
        [Sklad.Entity.DokumentProdaj_Sklad_m](T3.[DokumentProdaj_Sklad_m.DokumentProdaj_Sklad_m_Source], T3.[DokumentProdaj_Sklad_m.DokumentProdaj_Sklad_m_Target])
    FROM (
        SELECT -- Constructing DokumentProdaj_Sklad_m_Source
            CreateRef(dbContext.dokumentProdajs, row(T2.[DokumentProdaj_Sklad_m.DokumentProdaj_Sklad_m_Source.id]), [Sklad.Entity.DokumentProdaj]) AS [DokumentProdaj_Sklad_m.DokumentProdaj_Sklad_m_Source], 
            T2.[DokumentProdaj_Sklad_m.DokumentProdaj_Sklad_m_Target]
        FROM (
            SELECT -- Constructing DokumentProdaj_Sklad_m_Target
                T1.[DokumentProdaj_Sklad_m.DokumentProdaj_Sklad_m_Source.id], 
                CreateRef(dbContext.sklads, row(T1.[DokumentProdaj_Sklad_m.DokumentProdaj_Sklad_m_Target.id]), [Sklad.Entity.Skladi]) AS [DokumentProdaj_Sklad_m.DokumentProdaj_Sklad_m_Target]
            FROM (
                SELECT 
                    T.id AS [DokumentProdaj_Sklad_m.DokumentProdaj_Sklad_m_Source.id], 
                    T.Sklad_m_id AS [DokumentProdaj_Sklad_m.DokumentProdaj_Sklad_m_Target.id], 
                    True AS _from0
                FROM CodeFirstDatabase.DokumentProdaj AS T
                WHERE T.Sklad_m_id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for dbContext.DokumentProdaj_Xaridor_m.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DokumentProdaj_Xaridor_m
        [Sklad.Entity.DokumentProdaj_Xaridor_m](T3.[DokumentProdaj_Xaridor_m.DokumentProdaj_Xaridor_m_Source], T3.[DokumentProdaj_Xaridor_m.DokumentProdaj_Xaridor_m_Target])
    FROM (
        SELECT -- Constructing DokumentProdaj_Xaridor_m_Source
            CreateRef(dbContext.dokumentProdajs, row(T2.[DokumentProdaj_Xaridor_m.DokumentProdaj_Xaridor_m_Source.id]), [Sklad.Entity.DokumentProdaj]) AS [DokumentProdaj_Xaridor_m.DokumentProdaj_Xaridor_m_Source], 
            T2.[DokumentProdaj_Xaridor_m.DokumentProdaj_Xaridor_m_Target]
        FROM (
            SELECT -- Constructing DokumentProdaj_Xaridor_m_Target
                T1.[DokumentProdaj_Xaridor_m.DokumentProdaj_Xaridor_m_Source.id], 
                CreateRef(dbContext.kontragents, row(T1.[DokumentProdaj_Xaridor_m.DokumentProdaj_Xaridor_m_Target.id]), [Sklad.Entity.Xaridor]) AS [DokumentProdaj_Xaridor_m.DokumentProdaj_Xaridor_m_Target]
            FROM (
                SELECT 
                    T.id AS [DokumentProdaj_Xaridor_m.DokumentProdaj_Xaridor_m_Source.id], 
                    T.Xaridor_m_id AS [DokumentProdaj_Xaridor_m.DokumentProdaj_Xaridor_m_Target.id], 
                    True AS _from0
                FROM CodeFirstDatabase.DokumentProdaj AS T
                WHERE T.Xaridor_m_id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for dbContext.sklads.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing sklads
        [Sklad.Entity.Skladi](T1.Skladi_id, T1.Skladi_Name, T1.Skladi_More, T1.Skladi_Adress)
    FROM (
        SELECT 
            T.id AS Skladi_id, 
            T.Name AS Skladi_Name, 
            T.More AS Skladi_More, 
            T.Adress AS Skladi_Adress, 
            True AS _from0
        FROM CodeFirstDatabase.Skladi AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for dbContext.tovari.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing tovari
        [Sklad.Entity.Tovar](T1.Tovar_id, T1.Tovar_Name, T1.Tovar_Sana, T1.Tovar_Quantity, T1.Tovar_ShtrixKod, T1.Tovar_Turi, T1.Tovar_OlchovBirligi, T1.Tovar_Narxi, T1.Tovar_Summa) WITH 
        RELATIONSHIP(CREATEREF(dbContext.kontragents, ROW(T1.[Tovar_Kontragent_m.Tovar_Kontragent_m_Target.id]),[Sklad.Entity.Kontragent]),[Sklad.Entity.Tovar_Kontragent_m],Tovar_Kontragent_m_Source,Tovar_Kontragent_m_Target) 
        RELATIONSHIP(CREATEREF(dbContext.sklads, ROW(T1.[Tovar_Sklad_m.Tovar_Sklad_m_Target.id]),[Sklad.Entity.Skladi]),[Sklad.Entity.Tovar_Sklad_m],Tovar_Sklad_m_Source,Tovar_Sklad_m_Target) 
        RELATIONSHIP(CREATEREF(dbContext.dokumentProdajs, ROW(T1.[DokumentProdaj_Tovars.DokumentProdaj_Tovars_Source.id]),[Sklad.Entity.DokumentProdaj]),[Sklad.Entity.DokumentProdaj_Tovars],DokumentProdaj_Tovars_Target,DokumentProdaj_Tovars_Source) 
    FROM (
        SELECT 
            T.id AS Tovar_id, 
            T.Name AS Tovar_Name, 
            T.Sana AS Tovar_Sana, 
            T.Quantity AS Tovar_Quantity, 
            T.ShtrixKod AS Tovar_ShtrixKod, 
            T.Turi AS Tovar_Turi, 
            T.OlchovBirligi AS Tovar_OlchovBirligi, 
            T.Narxi AS Tovar_Narxi, 
            T.Summa AS Tovar_Summa, 
            True AS _from0, 
            T.Kontragent_m_id AS [Tovar_Kontragent_m.Tovar_Kontragent_m_Target.id], 
            T.Sklad_m_id AS [Tovar_Sklad_m.Tovar_Sklad_m_Target.id], 
            T.DokumentProdaj_id AS [DokumentProdaj_Tovars.DokumentProdaj_Tovars_Source.id]
        FROM CodeFirstDatabase.Tovar AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for dbContext.Tovar_Kontragent_m.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Tovar_Kontragent_m
        [Sklad.Entity.Tovar_Kontragent_m](T3.[Tovar_Kontragent_m.Tovar_Kontragent_m_Source], T3.[Tovar_Kontragent_m.Tovar_Kontragent_m_Target])
    FROM (
        SELECT -- Constructing Tovar_Kontragent_m_Source
            CreateRef(dbContext.tovari, row(T2.[Tovar_Kontragent_m.Tovar_Kontragent_m_Source.id]), [Sklad.Entity.Tovar]) AS [Tovar_Kontragent_m.Tovar_Kontragent_m_Source], 
            T2.[Tovar_Kontragent_m.Tovar_Kontragent_m_Target]
        FROM (
            SELECT -- Constructing Tovar_Kontragent_m_Target
                T1.[Tovar_Kontragent_m.Tovar_Kontragent_m_Source.id], 
                CreateRef(dbContext.kontragents, row(T1.[Tovar_Kontragent_m.Tovar_Kontragent_m_Target.id]), [Sklad.Entity.Kontragent]) AS [Tovar_Kontragent_m.Tovar_Kontragent_m_Target]
            FROM (
                SELECT 
                    T.id AS [Tovar_Kontragent_m.Tovar_Kontragent_m_Source.id], 
                    T.Kontragent_m_id AS [Tovar_Kontragent_m.Tovar_Kontragent_m_Target.id], 
                    True AS _from0
                FROM CodeFirstDatabase.Tovar AS T
                WHERE T.Kontragent_m_id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for dbContext.Tovar_Sklad_m.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Tovar_Sklad_m
        [Sklad.Entity.Tovar_Sklad_m](T3.[Tovar_Sklad_m.Tovar_Sklad_m_Source], T3.[Tovar_Sklad_m.Tovar_Sklad_m_Target])
    FROM (
        SELECT -- Constructing Tovar_Sklad_m_Source
            CreateRef(dbContext.tovari, row(T2.[Tovar_Sklad_m.Tovar_Sklad_m_Source.id]), [Sklad.Entity.Tovar]) AS [Tovar_Sklad_m.Tovar_Sklad_m_Source], 
            T2.[Tovar_Sklad_m.Tovar_Sklad_m_Target]
        FROM (
            SELECT -- Constructing Tovar_Sklad_m_Target
                T1.[Tovar_Sklad_m.Tovar_Sklad_m_Source.id], 
                CreateRef(dbContext.sklads, row(T1.[Tovar_Sklad_m.Tovar_Sklad_m_Target.id]), [Sklad.Entity.Skladi]) AS [Tovar_Sklad_m.Tovar_Sklad_m_Target]
            FROM (
                SELECT 
                    T.id AS [Tovar_Sklad_m.Tovar_Sklad_m_Source.id], 
                    T.Sklad_m_id AS [Tovar_Sklad_m.Tovar_Sklad_m_Target.id], 
                    True AS _from0
                FROM CodeFirstDatabase.Tovar AS T
                WHERE T.Sklad_m_id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for dbContext.DokumentProdaj_Tovars.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DokumentProdaj_Tovars
        [Sklad.Entity.DokumentProdaj_Tovars](T3.[DokumentProdaj_Tovars.DokumentProdaj_Tovars_Source], T3.[DokumentProdaj_Tovars.DokumentProdaj_Tovars_Target])
    FROM (
        SELECT -- Constructing DokumentProdaj_Tovars_Source
            CreateRef(dbContext.dokumentProdajs, row(T2.[DokumentProdaj_Tovars.DokumentProdaj_Tovars_Source.id]), [Sklad.Entity.DokumentProdaj]) AS [DokumentProdaj_Tovars.DokumentProdaj_Tovars_Source], 
            T2.[DokumentProdaj_Tovars.DokumentProdaj_Tovars_Target]
        FROM (
            SELECT -- Constructing DokumentProdaj_Tovars_Target
                T1.[DokumentProdaj_Tovars.DokumentProdaj_Tovars_Source.id], 
                CreateRef(dbContext.tovari, row(T1.[DokumentProdaj_Tovars.DokumentProdaj_Tovars_Target.id]), [Sklad.Entity.Tovar]) AS [DokumentProdaj_Tovars.DokumentProdaj_Tovars_Target]
            FROM (
                SELECT 
                    T.DokumentProdaj_id AS [DokumentProdaj_Tovars.DokumentProdaj_Tovars_Source.id], 
                    T.id AS [DokumentProdaj_Tovars.DokumentProdaj_Tovars_Target.id], 
                    True AS _from0
                FROM CodeFirstDatabase.Tovar AS T
                WHERE T.DokumentProdaj_id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for dbContext.kontragents.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing kontragents
        CASE
            WHEN T1._from2 THEN [Sklad.Entity.Kontragent](T1.Kontragent_id, T1.Kontragent_Name, T1.Kontragent_Adress, T1.Kontragent_More)
            ELSE [Sklad.Entity.Xaridor](T1.Kontragent_id, T1.Kontragent_Name, T1.Kontragent_Adress, T1.Kontragent_More)
        END
    FROM (
        SELECT 
            T.id AS Kontragent_id, 
            T.Name AS Kontragent_Name, 
            T.Adress AS Kontragent_Adress, 
            T.More AS Kontragent_More, 
            True AS _from0, 
            CASE WHEN T.Discriminator = N'Xaridor' THEN True ELSE False END AS _from1, 
            CASE WHEN T.Discriminator = N'Kontragent' THEN True ELSE False END AS _from2
        FROM CodeFirstDatabase.Kontragent AS T
        WHERE T.Discriminator IN {N'Xaridor', N'Kontragent'}
    ) AS T1");
        }
    }
}
